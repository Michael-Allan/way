Way index


    !! 
        : see `^^alarm point$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    + 
        : see `^^task point$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    / 
        : see `^^aside point$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    : 
        : see `^^command point$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    >
        : see @ http://reluk.ca/project/lexicon.brec
    @
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    \ 
        : see `^^comment carrier$`i @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ A ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    absolute good
        : see ethic/axiologic_uncertainty.brec
    abstract
        : see @ http://reluk.ca/project/lexicon.brec
    action
        , term ‘freedom of action’
            : re `‘(.+)’` see
        , term ‘rational action’
            : re `‘(.+)’` see
    alarm point
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    alphanumeric
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    also, command `see also`
        : re `\`(.+)\`` see
    anchored prefix
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    ancestor, of a body fractum
        : see @ `^^hierarchic relata$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    aside point
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    associative reference
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    authority, term ‘certificate of authority’
        : re `‘(.+)’` see


╺━━ B ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    blind, term ‘indent blind’
        : re `‘(.+)’` see
    body
        : see @ `^^fractum$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    body segment
        : see @ http://reluk.ca/project/Breccia/parser/lexicon.brec
    body fractum
        : see `^^fractal types$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    .brec
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    Breccia
        : see http://reluk.ca/project/Breccia/
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    Breccia Mode for Emacs
        : see http://reluk.ca/project/Breccia/Emacs/
    Breccian
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    Breccia Parser
        : see http://reluk.ca/project/Breccia/parser/
        , plain
            : join `^*plain Breccia parser$`
    Breccia to X-Breccia
        : see http://reluk.ca/project/Breccia/XML/translator/
    Breccia Web Imager
        : see http://reluk.ca/project/Breccia/Web/imager/
    bullet
        : see @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ C ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    canonical location
        : see @ http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
    capture group
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    carrier, term ‘comment carrier’
        : re `‘(.+)’` see
    cast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec
    certificate of authority
        : see @ http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
    cf.
        : see `^*cf\.\+.$.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    cf. e.g.
        : see `^*cf\.\+.$.+‘(cf\.)’.+‘(e\.g\.)’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    change flow
        : see @ http://reluk.ca/project/Tapster/lexicon.brec
    child, of a fractum
        : see @ `^^hierarchic relata$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    clause, term ‘containment clause’
        : re `‘(.+)’` see
    cluster group
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    command directory
        : see @ http://reluk.ca/project/lexicon.brec
    command point
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    comment carrier
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    concrete
        : see @ http://reluk.ca/project/lexicon.brec
    containment clause
        : see @ `^^referent clause$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    containment operator
        : see @ http://reluk.ca/project/Breccia/lexicon.brec


╺━━ D ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    declaration, term ‘way declaration’
        : re `‘(.+)’` see
    descendant, of a fractum
        : see @ `^^hierarchic relata$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    designator, term ‘thoroughfractum designator’
        : re `‘(.+)’` see
    descriptor
        : see `^*file descriptor$`
        : see `^*point descriptor$`
    diaspora
        : see e.g. diaspora/
    difference, term ‘standing difference’
        : re `‘(.+)’` see
    directory, term ‘command directory’
        : re `‘(.+)’` see
    divider
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    division
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    duty, term ‘moral duty’
        : re `‘(.+)’` see


╺━━ E ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    e.g.
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
        , command `cf. e.g.`
            : re `\`(.+)\`` see
        , command `see e.g.`
            : re `\`(.+)\`` see
    Emacs
        , Breccia Mode
            : join `^*Breccia Mode for Emacs$`
        , Waybrec Mode
            : join `^*Waybrec Mode for Emacs$`
    ends justification
        : see @ ethic/precarious_conditions.brec
        : see @ ethic/rights.brec
        : see `^*right:.+To justify one’s ends` @ ethic/rights.brec
    engagement
        , term ‘way engagement’
            : re `‘(.+)’` see
        , term ‘way engagement point’
            : re `‘(.+)’` see
    ethic, term ‘normative ethic’
        : re `‘(.+)’` see
    expression, term ‘regular expression’
        : re `‘(.+)’` see
    extracast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec


╺━━ F ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    F, separator
        : see @ `^^separation$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    file
        , term ‘headless file’
            : re `‘(.+)’` see
        , term ‘way file’
            : re `‘(.+)’` see
    file descriptor
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    file fractum
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    file head
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    flow, term ‘change flow’
        : re `‘(.+)’` see
    foregap
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    formal
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    fracta
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    fractal
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
        , term ‘non-fractal’
            : re `‘(.+)’` see
    fractal segment
        : see @ http://reluk.ca/project/Breccia/parser/lexicon.brec
    fractum
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
        , term ‘body fractum’
            : re `‘(.+)’` see
        , term ‘file fractum’
            : re `‘(.+)’` see
    fractum indicant
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    freedom of action
        : see @ `^^inference of conditions$`i @ ethic/precarious_conditions.brec
        : see @ ethic/rights.brec
        : see `^*right.+imperfect.+Freedom of action` @ ethic/rights.brec
        : see `^*right: \(perfect.+Freedom of action` @ ethic/rights.brec


╺━━ G ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    gap
        , term ‘foregap’
            : re `‘(.+)’` see
        , term ‘postgap’
            : re `‘(.+)’` see
    genealogy of the wayic
        : see http://reluk.ca/project/wayic/genealogy.xht
    good, term ‘absolute good’
        : re `‘(.+)’` see
    grana
        : see @ http://reluk.ca/project/Breccia/parser/lexicon.brec
    granal
        : see @ http://reluk.ca/project/Breccia/parser/lexicon.brec
    granum
        : see @ http://reluk.ca/project/Breccia/parser/lexicon.brec
    group
        , term ‘capture group’
            : re `‘(.+)’` see
        , term ‘cluster group’
            : re `‘(.+)’` see


╺━━ H ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    head
        : see @ `^^fractum$`i @ http://reluk.ca/project/Breccia/language_definition.brec
        , term ‘file head’
            : re `‘(.+)’` see
    headless file
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    hierarchic order
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    hierarchy
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    hyperlink referrer
        : see @ http://reluk.ca/project/Web/lexicon.brec


╺━━ I ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    i
        : see @ `^^match modifier$`i @ `^^regular-expression pattern matching$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    identifier, term ‘waycaster identifier’
        : re `‘(.+)’` see
    i.e.
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    image, term ‘Web image’
        : re `‘(.+)’` see
    imager, term ‘Web imager’
        : re `‘(.+)’` see
    imperfect rights
        : see `^^perfect and imperfect rights$`i @ ethic/rights.brec
    indent, term ‘perfect indent’
        : re `‘(.+)’` see
    indent blind
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    indicant
        , term ‘fractum indicant’
            : re `‘(.+)’` see
        , term ‘inferential referent indicant’
            : re `‘(.+)’` see
        , term ‘resource indicant’
            : re `‘(.+)’` see
    inferential referent indicant
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    informal
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    intercast
        : see @ http://reluk.ca/project/wayic/intercast/lexicon.brec
    intercast networking, project
        : see http://reluk.ca/project/wayic/intercast/
    interpolation variable
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    interpolator, term ‘variable interpolator’
        : re `‘(.+)’` see
    intracast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec


╺━━ J ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    join
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    jointer
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    justification, term ‘ends justification’
        : re `‘(.+)’` see


╺━━ L ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    label, term ‘titling label’
        : re `‘(.+)’` see
    linear order
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    location, term ‘canonical location’
        : re `‘(.+)’` see


╺━━ M ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    m
        : see @ `^^match modifier$`i @ `^^regular-expression pattern matching$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    Makeshift
        : see http://reluk.ca/project/building/Makeshift/
    matching, term ‘regular-expression pattern matching’
        : re `‘(.+)’` see
    mode
        , Breccia Mode
            : join `^*Breccia Mode for Emacs$`
        , Waybrec Mode
            : join `^*Waybrec Mode for Emacs$`
    model, term ‘way model’
        : re `‘(.+)’` see
    moral duty
        : see ethic/moral_uncertainty.brec


╺━━ N ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    NB
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    N.B.
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    networking, term ‘intercast networking’
        : re `‘(.+)’` see
    newline
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    non-fractal
        : see `^*·\R.+‘${same}’`s @ `^^resource indicant$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    normative ethic
        : see e.g. ethic/


╺━━ O ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    off-way
        : see @ http://reluk.ca/project/wayic/model/lexicon.brec
    on-way
        : see @ http://reluk.ca/project/wayic/model/lexicon.brec
    operator, term ‘containment operator’
        : re `‘(.+)’` see
    order
        , term ‘hierarchic order’
            : re `‘(.+)’` see
        , term ‘linear order’
            : re `‘(.+)’` see
    orphan image file
        : see @ http://reluk.ca/project/Breccia/Web/imager/lexicon.brec


╺━━ P ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    P
        : see @ `^^separation$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    p
        : see @ `^^match modifier$`i @ `^^regular-expression pattern matching$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    package, term ‘proper package’
        : re `‘(.+)’` see
    parameter, term ‘waycast parameter’
        : re `‘(.+)’` see
    parameterizer, term ‘waycast parameterizer’
        : re `‘(.+)’` see
    parameter typifier
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    parametric subsystem
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    parent, of a body fractum
        : see @ `^^hierarchic relata$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    parser
        , term ‘Breccia Parser’
            : re `‘(.+)’` see
        , of plain Breccia
            : join `^*plain Breccia parser$`
    path, term ‘proper path’
        : re `‘(.+)’` see
    pattern, term ‘regular-expression pattern matching’
        : re `‘(.+)’` see
    perfect indent
        : see @ `^^separation$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    perfect rights
        : see `^^perfect and imperfect rights$`i @ ethic/rights.brec
    personal security
        : see @ ethic/rights.brec
        : see `^*right:.+The security of one’s person` @ ethic/rights.brec
    plain Breccia parser
        : see http://reluk.ca/project/Breccia/parser/plain/
    plain point
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    plain whitespace
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    point
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    point descriptor
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    pointer
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    postgap
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    private
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
        : see `has.+form.+‘${same}’`s @ `^^privatizer$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    privately
        : see `has.+form.+‘${same}’`s @ `^^command point$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    privatize
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    privatizer
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    proper package
        : see @ http://reluk.ca/project/lexicon.brec
    proper path
        , of a project or project file
            : see `^*proper path$` @ http://reluk.ca/project/lexicon.brec
        , of a waycast file
            : see `^*proper path$` @ http://reluk.ca/project/wayic/cast/lexicon.brec
    publication, term ‘Web publication’
        : re `‘(.+)’` see


╺━━ R ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    rational action
        : see ethic/precarious_conditions.brec
    re
        : see `^^referrer clause$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    rebase
        : see @ http://reluk.ca/project/lexicon.brec
    regular-expression pattern matching
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    reference
        , term ‘associative reference’
            : re `‘(.+)’` see
        , term ‘body reference’
            : re `‘(.+)’` see
    referent, term ‘inferential referent indicant’
        : re `‘(.+)’` see
    regular expression
        : see `^^regular-expression pattern matching$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    resource indicant
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    rights
        : see ethic/rights.brec
        , term ‘imperfect rights’
            : re `‘(.+)’` see
        , term ‘perfect rights’
            : re `‘(.+)’` see


╺━━ S ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    S
        : see @ `^^separation$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    s
        : see @ `^^match modifier$`i @ `^^regular-expression pattern matching$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    safe, term ‘thread safe’
        : re `‘(.+)’` see
    sc.
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    security, term ‘personal security’
        : re `‘(.+)’` see
    see
        : see `^*see\+.$.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    see also
        : see `^*see\+.$.+‘(also)’.+‘(see)’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    see e.g.
        : see `^*see\+.$.+‘(see)’.+‘(e\.g\.)’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec
    segment
        , term ‘body segment’
            : re `‘(.+)’` see
        , term ‘fractal segment’
            : re `‘(.+)’` see
    set
        : see `has.+form.+‘${same}’`s @ `^^waycast parameterizer$`i @
          http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    sibling, of a body fractum
        : see @ `^^hierarchic relata$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    stand
        : see @ http://reluk.ca/project/Tapster/lexicon.brec
    stock
        : see @ http://reluk.ca/project/Tapster/lexicon.brec
    standing difference
        : see @ http://reluk.ca/project/Tapster/lexicon.brec
    subjoin
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    subjoint
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    subsystem, term ‘parametric subsystem’
        : re `‘(.+)’` see
    surjoin
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    surjoint
        : see @ http://reluk.ca/project/Breccia/lexicon.brec


╺━━ T ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    tap
        : see @ http://reluk.ca/project/Tapster/lexicon.brec
    task point
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    term
        : see @ `^^fractum$`i @ http://reluk.ca/project/Breccia/language_definition.brec
    thoroughfracta
        : see @ http://reluk.ca/project/wayic/model/lexicon.brec
    thoroughfractal
        : see @ http://reluk.ca/project/wayic/model/lexicon.brec
    thoroughfractum
        : see @ http://reluk.ca/project/wayic/model/lexicon.brec
        : see `has.+form.+‘${same}’`s @ `^^thoroughfractum designator$`i @
          http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    thoroughfractum designator
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    thread safe
        : see @ http://reluk.ca/project/Java/lexicon.brec
    titling label
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    typifier, term ‘parameter typifier’
        : re `‘(.+)’` see


╺━━ U ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    uncast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec


╺━━ V ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    variable, term ‘interpolation variable’
        : re `‘(.+)’` see
    variable interpolator
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    viz.
        : see `^*·\R.+‘${same}’`s @ `^^referential command$`i @
          http://reluk.ca/project/Breccia/language_definition.brec


╺━━ W ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    way
        : see @ wayic/lexicon.brec
        : see e.g. ./
    Waybrec
        : see http://reluk.ca/project/wayic/Waybrec/
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
        , Web imager
            : join `^*Waycast Web Imager$`
    Waybreccian
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    Waybrec Mode for Emacs
        : see http://reluk.ca/project/wayic/Waybrec/Emacs/
    Waybrec Parser
        : see http://reluk.ca/project/wayic/Waybrec/parser/
    waycast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec
        , project
            : see http://reluk.ca/project/wayic/cast/
        , Web imager
            : join `^*Waycast Web Imager$`
    waycaster
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec
    waycaster identifier
        : see `^^identifier of a waycaster$`i @ http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
        : see `^^waycaster_identifier$`i @ `^^certificate of authority$`i @
          http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
    waycast parameter
        : see `has.+form.+${same}`s @ `^^waycast parameterizer$`i @
          http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    waycast parameterizer
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    Waycast Web Imager
        : see http://reluk.ca/project/wayic/Web/imager/
    way declaration
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec
    way engagement
        : see @ wayic/lexicon.brec
    way engagement point
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    way file
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    wayic
        : see @ wayic/lexicon.brec
        : see e.g. wayic/
        , genealogy of
            : join `^*genealogy of the wayic$`
    wayical
        : see @ wayic/lexicon.brec
    wayics
        : see @ wayic/lexicon.brec
    way model
        : see @ http://reluk.ca/project/wayic/model/lexicon.brec
    Way Modelling
        : see http://reluk.ca/project/wayic/model/
    waysource
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    Web image
        : see @ http://reluk.ca/project/Web/lexicon.brec
    Web imager
        , Breccia
            : join `^*Breccia Web Imager$`
        , waycast
            : join `^*Waycast Web Imager$`
    Web publication
        : see @ http://reluk.ca/project/Breccia/project_installation.brec
    whitespace
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
        , term ‘plain whitespace’
            : re `‘(.+)’` see


╺━━ X ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    X-Breccia
        : see http://reluk.ca/project/Breccia/XML/
        : see @ http://reluk.ca/project/Breccia/XML/lexicon.brec
        , translator
            : see `^*Breccia to X-Breccia$`



                                                    \ Copyright © 2019-2022  Michael Allan.  Licence MIT.
